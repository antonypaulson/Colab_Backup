{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Quora Answer Classifier","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"ekigQESw0Olz","colab_type":"code","colab":{}},"cell_type":"code","source":["# Enter your code here. Read input from STDIN. Print output to STDOUT\n","import numpy as np\n","import pandas as pd\n","\n","a = input()\n","nrecords = a.split()[0]\n","nparameters = a.split()[1]\n","train_list = []\n","for i in range(0, int(nrecords)):\n","    line = input()\n","    row = line.split()\n","    train_list.append(row)\n","frame = pd.DataFrame(train_list)\n","#print (frame)\n","for i in range(2,int(nparameters)+2):\n","    frame[i] = frame[i].apply(lambda a: str(a).split(':')[1])\n","\n","\n","frame[1] = frame[1].apply(lambda a: str(a).replace('+1', '1') if '+1' in str(a) else 0)\n","#frame[1] = frame[1].apply(lambda a: str(a).replace('-1', '0') if '-1' in str(a) else a)\n","#print (frame)\n","\n","test_list = []\n","ntest = input()\n","for i in range (0, int(ntest)):\n","    line = input()\n","    row1 = line.split()\n","    test_list.append(row1) \n","frame_test =  pd.DataFrame(test_list)\n","#print(frame_test)\n","for i in range(1,int(nparameters)+1):\n","    frame_test[i] = frame_test[i].apply(lambda a: str(a).split(':')[1])\n","#print(frame_test)\n","\n","X = frame.iloc[:,2:]\n","cols = X.columns\n","for col in cols:\n","    X[col] = X[col].apply(lambda a: float(a))\n","y = frame[1]\n","y = y.apply(lambda a: int(a))\n","#print(y)\n","#print(X)\n","\n","cols_test = frame_test.columns[1:]\n","for col in cols_test:\n","    frame_test[col] = frame_test[col].apply(lambda a: float(a))\n","#print(frame_test)\n","\n","frame_test.rename(columns = lambda z: z+1 , inplace = True)\n","#print (frame_test)\n","# frame_test.columns[1:] = str(np.arange(2,int(nparameters)+2))\n","# print(frame_test.columns)\n","from sklearn.linear_model import LogisticRegression\n","model = LogisticRegression() \n","model.fit(X.iloc[:,1:],y)\n","\n","#print(model.coef_)\n","\n","pred = model.predict(frame_test.iloc[:,2:])\n","pred = map(lambda z: '+1' if z ==1 else '-1', pred)\n","\n","#print(pred)\n","for i, prediction in enumerate(pred):\n","    print (frame_test.iloc[i,0], prediction)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"hWsnmiFWURkD","colab_type":"code","colab":{}},"cell_type":"code","source":["\n","# Complete the analyze_dna function below.\n","def analyze_dna(strands, codon_mapping):\n","    q = strands \n","    my_list =[]\n","    for i, strand in enumerate (strands):\n","        for j in q:\n","            if q[j][:-3]==strand[:3]:\n","                my_list.append(q[j][:-3])\n","                mylist.append(strand)\n","                \n","                \n","\n","\n","\n","if __name__ == '__main__':\n","    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n","    \n","    reader = csv.reader(open('codon.csv', newline=''), delimiter=',')\n","    codon_mapping = {key: value for key, value in reader}\n","    \n","    strands_count = int(input().strip())\n","\n","    strands = []\n","\n","    for _ in range(strands_count):\n","        strands_item = input()\n","        strands.append(strands_item)\n","\n","    res = analyze_dna(strands, codon_mapping)\n","\n","    fptr.write(res + '\\n')\n","\n","    fptr.close()\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"SW9qDnR5VSEJ","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}